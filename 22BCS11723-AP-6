class Solution {
public:
    unordered_map<int, int> inorderMapIndices;

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        inorderMapIndices.clear();
        for (int i = 0; i < inorder.size(); i++) {
            inorderMapIndices[inorder[i]] = i;
        }

        int postIndex=postorder.size()-1;

       return constructTree(inorder, postorder, postIndex, 0,inorder.size() - 1);
        
    }

    TreeNode* constructTree(vector<int>& inorder, vector<int>& postorder,int& postIndex, int start, int end) {
        if (start > end) {
            return NULL;
        }

        int rootNode = postorder[postIndex--];
        TreeNode* node = new TreeNode(rootNode);
        int index=inorderMapIndices[rootNode];

        node->right = constructTree(inorder, postorder, postIndex, index+ 1, end);
        node->left = constructTree(inorder, postorder, postIndex, start,index - 1);
        return node;
    }
};
